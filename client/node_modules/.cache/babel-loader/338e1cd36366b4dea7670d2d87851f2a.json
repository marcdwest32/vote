{"ast":null,"code":"import _slicedToArray from \"/home/marc/immersion/vote/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/marc/immersion/vote/client/src/context/poll/PollState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport uuid from 'uuid';\nimport PollContext from './pollContext';\nimport pollReducer from './pollReducer';\nimport { ADD_POLL, DELETE_POLL, SET_CURRENT, UPDATE_POLL, FILTER_POLLS, CLEAR_FILTER } from '../types';\n\nconst PollState = props => {\n  const initialState = {\n    polls: [{\n      id: 1,\n      question: 'Why are we here?',\n      option1: 'Because',\n      option2: 'Jesus',\n      option3: 'Dinosaurs',\n      option1vote: 0,\n      option2vote: 0,\n      option3vote: 0,\n      current: null\n    }, {\n      id: 2,\n      question: 'Who died for our sins?',\n      option1: 'Jesus',\n      option2: 'Lee Harvey Oswald',\n      option3: 'Dinosaurs',\n      option1vote: 0,\n      option2vote: 0,\n      option3vote: 0,\n      current: null\n    }, {\n      id: 3,\n      question: 'Who would make a better President?',\n      option1: 'Bobcat Goldthwait',\n      option2: 'Jesus',\n      option3: 'Dinosaurs',\n      option1vote: 0,\n      option2vote: 0,\n      option3vote: 0,\n      current: null\n    }],\n    filtered: null\n  };\n\n  const _useReducer = useReducer(pollReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Add Poll\n\n\n  const addPoll = poll => {\n    poll.id = uuid.v4();\n    dispatch({\n      type: ADD_POLL,\n      payload: poll\n    });\n  }; // Delete Poll\n\n\n  const deletePoll = id => {\n    dispatch({\n      type: DELETE_POLL,\n      payload: id\n    });\n  }; // Set Current\n\n\n  const setCurrent = (poll, option) => {\n    const payload = {\n      poll,\n      option\n    };\n    dispatch({\n      type: SET_CURRENT,\n      payload\n    });\n  }; // Update Poll\n\n\n  const updatePoll = poll => {\n    axios.put(\"/\".concat(poll.id), {\n      vote: poll.current\n    }).then(updatedPoll => {\n      dispatch({\n        type: UPDATE_POLL,\n        payload: updatedPoll\n      });\n    });\n  }; // Filter Polls\n\n\n  const filterPolls = text => {\n    dispatch({\n      type: FILTER_POLLS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(PollContext.Provider, {\n    value: {\n      polls: state.polls,\n      addPoll,\n      deletePoll,\n      setCurrent,\n      updatePoll,\n      filterPolls,\n      clearFilter\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default PollState;","map":{"version":3,"sources":["/home/marc/immersion/vote/client/src/context/poll/PollState.js"],"names":["React","useReducer","axios","uuid","PollContext","pollReducer","ADD_POLL","DELETE_POLL","SET_CURRENT","UPDATE_POLL","FILTER_POLLS","CLEAR_FILTER","PollState","props","initialState","polls","id","question","option1","option2","option3","option1vote","option2vote","option3vote","current","filtered","state","dispatch","addPoll","poll","v4","type","payload","deletePoll","setCurrent","option","updatePoll","put","vote","then","updatedPoll","filterPolls","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport uuid from 'uuid';\nimport PollContext from './pollContext';\nimport pollReducer from './pollReducer';\nimport {\n\tADD_POLL,\n\tDELETE_POLL,\n\tSET_CURRENT,\n\tUPDATE_POLL,\n\tFILTER_POLLS,\n\tCLEAR_FILTER,\n} from '../types';\n\nconst PollState = props => {\n\tconst initialState = {\n\t\tpolls: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\tquestion: 'Why are we here?',\n\t\t\t\toption1: 'Because',\n\t\t\t\toption2: 'Jesus',\n\t\t\t\toption3: 'Dinosaurs',\n\t\t\t\toption1vote: 0,\n\t\t\t\toption2vote: 0,\n\t\t\t\toption3vote: 0,\n\t\t\t\tcurrent: null,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\tquestion: 'Who died for our sins?',\n\t\t\t\toption1: 'Jesus',\n\t\t\t\toption2: 'Lee Harvey Oswald',\n\t\t\t\toption3: 'Dinosaurs',\n\t\t\t\toption1vote: 0,\n\t\t\t\toption2vote: 0,\n\t\t\t\toption3vote: 0,\n\t\t\t\tcurrent: null,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\tquestion: 'Who would make a better President?',\n\t\t\t\toption1: 'Bobcat Goldthwait',\n\t\t\t\toption2: 'Jesus',\n\t\t\t\toption3: 'Dinosaurs',\n\t\t\t\toption1vote: 0,\n\t\t\t\toption2vote: 0,\n\t\t\t\toption3vote: 0,\n\t\t\t\tcurrent: null,\n\t\t\t},\n\t\t],\n\t\tfiltered: null,\n\t};\n\n\tconst [state, dispatch] = useReducer(pollReducer, initialState);\n\n\t// Add Poll\n\tconst addPoll = poll => {\n\t\tpoll.id = uuid.v4();\n\t\tdispatch({ type: ADD_POLL, payload: poll });\n\t};\n\n\t// Delete Poll\n\tconst deletePoll = id => {\n\t\tdispatch({ type: DELETE_POLL, payload: id });\n\t};\n\n\t// Set Current\n\tconst setCurrent = (poll, option) => {\n\t\tconst payload = {\n\t\t\tpoll,\n\t\t\toption,\n\t\t};\n\t\tdispatch({ type: SET_CURRENT, payload });\n\t};\n\n\t// Update Poll\n\tconst updatePoll = poll => {\n\t\taxios.put(`/${poll.id}`, { vote: poll.current }).then(updatedPoll => {\n\t\t\tdispatch({ type: UPDATE_POLL, payload: updatedPoll });\n\t\t});\n\t};\n\n\t// Filter Polls\n\tconst filterPolls = text => {\n\t\tdispatch({ type: FILTER_POLLS, payload: text });\n\t};\n\n\t// Clear Filter\n\tconst clearFilter = () => {\n\t\tdispatch({ type: CLEAR_FILTER });\n\t};\n\n\treturn (\n\t\t<PollContext.Provider\n\t\t\tvalue={{\n\t\t\t\tpolls: state.polls,\n\t\t\t\taddPoll,\n\t\t\t\tdeletePoll,\n\t\t\t\tsetCurrent,\n\t\t\t\tupdatePoll,\n\t\t\t\tfilterPolls,\n\t\t\t\tclearFilter,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</PollContext.Provider>\n\t);\n};\n\nexport default PollState;\n"]},"metadata":{},"sourceType":"module"}